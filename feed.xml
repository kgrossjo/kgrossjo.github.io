<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>kgrossjo</title>
    <atom:link href="http://kgrossjo.github.io/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://kgrossjo.github.io</link>
    <description>Notes of an insignificant developer</description>
    <pubDate>Sun, 04 May 2014 02:00:00 +0200</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Front end Javascript development</title>
      <link>http://kgrossjo.github.io/articles/2014-05-front-end-js/</link>
      <pubDate>Sun, 04 May 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2014-05-front-end-js/</guid>
      <author></author>
      <description>&lt;p&gt;Doing simple things with front-end Javascript development
really does turn out to be simple.  I’m trying to dip
my toes in front-end Javascript development (having the
opportunity to do some server-side Javascript development
in my day job).&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Today, I had the chance to fix two little buttons that made
text on a web page larger or smaller.  It’s really interesting
to see how easy this is to do.  Of course, it’s just a very 
simple task in the first place, but given that I have so little
experience, I thought it might have turned out to be harder
for me.&lt;/p&gt;
&lt;p&gt;Basically, the idea is that you have one HTML element that
contains all your content (you can use &lt;code&gt;body&lt;/code&gt; if you can’t find
another one).  And you write your CSS so that the font size
is a parameter of that element.  (I guess you can use relative
font sizes for other elements.)&lt;/p&gt;
&lt;p&gt;Now changing the font size is just a matter of changing this
CSS in one central place, and jQuery makes it easy:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'#container'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'font-size'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This returns a string such as “16px” that tells you the font
size.  And you can change it with&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;'#container'&lt;/span&gt;).css(&lt;span class=&quot;string&quot;&gt;'font-size'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'18px'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Very easy.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Cherry Strait - Nice Keyboard</title>
      <link>http://kgrossjo.github.io/articles/2014-05-cherry-strait/</link>
      <pubDate>Thu, 01 May 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2014-05-cherry-strait/</guid>
      <author></author>
      <description>&lt;p&gt;MacBook keyboard aficionados may like the Cherry Strait.
It has the feel of the MacBook keyboard.
It is very flat.  Little force is required to depress the keys.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Kudos to my colleague &lt;a href=&quot;https://plus.google.com/+DanielFlinkmann/posts&quot;&gt;Daniel
Flinkmann&lt;/a&gt; who suggested the
Cherry Strait as a keyboard that looks and feels similar  to the MacBook
keyboards.  I must say, I like the feel of the MacBook keyboard. Some folks may
laugh and say that only the IBM Model 2 is the real keyboard (&lt;a href=&quot;http://www.daskeyboard.com/&quot;&gt;Das
Keyboard&lt;/a&gt; anyone?). I let them laugh and I’m happy
with this keyboard.&lt;/p&gt;
&lt;p&gt;(Some years ago they laughed at me for using a &lt;a href=&quot;http://www.pfusystems.com/embedded-keyboard/hhkb/index.html&quot;&gt;Happy Hacking Keyboard Lite
2&lt;/a&gt;.  They asked me
whether I didn’t have enough money to buy a full keyboard.)&lt;/p&gt;
&lt;p&gt;The only problem here is an oddity in the keyboard layout.
There is a block of six keys above the cursor keys:&lt;/p&gt;
&lt;table border=&quot;2&quot; frame=&quot;box&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;Insert&lt;/td&gt;
    &lt;td&gt;Home&lt;/td&gt;
    &lt;td&gt;Page Up&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Delete&lt;/td&gt;
    &lt;td&gt;End&lt;/td&gt;
    &lt;td&gt;Page Down&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The Cherry Strait modifies this from a 3x2 format to a 2x3 format, like this:&lt;/p&gt;
&lt;table border=&quot;2&quot; frame=&quot;box&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;Insert&lt;/td&gt;
    &lt;td&gt;End&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Delete&lt;/td&gt;
    &lt;td&gt;Page Up&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Home&lt;/td&gt;
    &lt;td&gt;Page Down&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And the position of the Home key at the bottom left and the End key at the top
right, that’s just completely counter-intuitive.  Home should not be at the
bottom and End should not be at the top.&lt;/p&gt;
&lt;p&gt;So I emailed their support and suggested to move things around, and they
said that the keyboard layout had to be modified to maintain the design
of this lifestyle product.  I must say, that’s a weird response.  It’s
not necessary to change the 2x3 layout, we just need to move the keys around.
I propose this layout:&lt;/p&gt;
&lt;table border=&quot;2&quot; frame=&quot;box&quot;&gt;
  &lt;tr&gt;
    &lt;td&gt;Home&lt;/td&gt;
    &lt;td&gt;End&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Insert&lt;/td&gt;
    &lt;td&gt;Page Up&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Delete&lt;/td&gt;
    &lt;td&gt;Page Down&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I see the following advantages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Having Home on the left and End on the right makes complete sense.
After all, usually, Home goes to the beginning of the line (i.e. to 
the left) and End goes to the end of the line (i.e. to the right).&lt;/li&gt;
&lt;li&gt;Having Insert in the left column on the middle is good because that
spot is hard to find and most people don’t need the Insert key often.
Makes sense to put the most seldom used key in the most inconvenient
spot.&lt;/li&gt;
&lt;li&gt;Having Page Up above Page Down also makes complete sense based on
what the keys do.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    <item>
      <title>Looking for a vim like Safari extension</title>
      <link>http://kgrossjo.github.io/articles/2014-05-vimlike-safariextension/</link>
      <pubDate>Thu, 01 May 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2014-05-vimlike-safariextension/</guid>
      <author></author>
      <description>&lt;p&gt;I use Safari on my Mac because of its smooth integration into the Mac
experience, but then I found out that I do miss vi keyboard shortcuts.
“vimlike extended” to the rescue!&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;There seem to be a couple of Safari extensions that do vi or vim like
keyboard shortcuts.  One of them does link hinting only, but not h/j/k/l
scrolling.  So I’m happy I found one that does both:
&lt;a href=&quot;https://github.com/sethfowler/vimlike-extended&quot;&gt;vimlike extended&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It’s a bit embarrassing to admit that I don’t know how to convert a source
tree into something that can be installed as a Safari extension.  I kind of
guessed I could just create a &lt;code&gt;xar&lt;/code&gt; archive and name it &lt;code&gt;foo.safariextz&lt;/code&gt;,
but that didn’t work out: Safari told me  that there was an error installing
the extension.  But it didn’t tell me what the error was.  So I’m happy that
“vimlike extended” comes with  a pre-built extension.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Setting up SMTP Authentication with Postfix and Dovecot</title>
      <link>http://kgrossjo.github.io/articles/2014-04-postfix-sasl/</link>
      <pubDate>Wed, 30 Apr 2014 02:00:00 +0200</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2014-04-postfix-sasl/</guid>
      <author></author>
      <description>&lt;p&gt;My private system had to be reimaged, and ever since I couldn’t send
mail via my private mail server.  Finally I got around to using a
little bit of Google-fu, and I found this tutorial:&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;http://xmodulo.com/2014/01/enable-user-authentication-postfix-smtp-server-sasl.html&quot;&gt;http://xmodulo.com/2014/01/enable-user-authentication-postfix-smtp-server-sasl.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Finally!  An explanation that I could understand how to set it up.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Choosing an editor or IDE</title>
      <link>http://kgrossjo.github.io/articles/2013-11-editor/</link>
      <pubDate>Sat, 23 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2013-11-editor/</guid>
      <author></author>
      <description>&lt;p&gt;I had been using one editor for many years, now I’m searching and I’m not sure
I’ve found the right one.  Life was much simpler when I always knew which tool
to turn to, but life is much richer now that I have many tools to look at.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Some time back, I’ve used Emacs for ten years, for everything that had to do
with hacking.  I used it for hacking Emacs Lisp, I used it for hacking Perl, I
used it for hacking Java.  And then I decided that I had to see what else the
world had to offer.  So I investigated Eclipse, given that I was a Java hacker
at the time.  Eclipse was providing awesome features that were very useful for
hacking Java: I could navigate to a method that was being invoked, I could
complete class names and method names — bliss.&lt;/p&gt;
&lt;p&gt;Then I had a reason to hack PHP, and the only place I could do it was on the
server which didn’t have a proper development environment.  So I started using
vim pretty extensively for that.  Somehow I could make do without missing the
IDE completion and navigation features I had gotten used to from Eclipse.&lt;/p&gt;
&lt;p&gt;Then I had another reason to hack PHP, and this time I decided I wanted to
investigate another IDE.  PHP tools for Eclipse pretty much sucked at that
point, I recall that I could open a class by name, but there was no method
completion and so on.  Then I discovered that JetBrains made PhpStorm for a
reasonable price, and I had heard good things about IntelliJ IDEA from the same
company.  PhpStorm is really nice.  It knows more about completion than I
thought possible.  And if it doesn’t know then it’s easy to put a PhpDoc comment
into the code that tells it.&lt;/p&gt;
&lt;p&gt;And it turns out that PhpStorm includes the functionality of WebStorm, so I can
also hack JavaScript with it.  I decided that I’d like to learn what Node.js is
all about.  I’m not sure about the completion features, just yet.&lt;/p&gt;
&lt;p&gt;I had also read good things about LightTable, but somehow I couldn’t get that to
fly with Node.js.  Yes, it opens my project, and yes, I can select a file
easily.  But where is the navigation?  Where is the completion?  I haven’t found
out yet.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The first post on Wintersmith</title>
      <link>http://kgrossjo.github.io/articles/2013-11-wintersmith/</link>
      <pubDate>Wed, 20 Nov 2013 01:00:00 +0100</pubDate>
      <guid isPermaLink="true">http://kgrossjo.github.io/articles/2013-11-wintersmith/</guid>
      <author></author>
      <description>&lt;p&gt;This is my first post using Wintersmith.  Seems like it is easy enough
to use.  We will see how it goes.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Why did I choose Wintersmith?  Well, first I had the idea of hosting
my blog on github pages, then I saw that jekyll can be used, then I
learned more about jekyll and saw that it uses Ruby.  But right now,
I’m more interested in learning Node.js, so I thought perhaps I
can find something using Node.js, and — lo! — I found Wintersmith.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stephanhoyer.github.io/articles/001-building-wintersmith-blog/&quot;&gt;http://stephanhoyer.github.io/articles/001-building-wintersmith-blog/&lt;/a&gt;
This guy explains how to make it work with github pages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/jnordberg/wintersmith&quot;&gt;https://github.com/jnordberg/wintersmith&lt;/a&gt;
This seems to be the Wintersmith home page.&lt;/p&gt;
&lt;p&gt;Everything below is standard Wintersmith content.  I want to keep it
for the time being for learning purposes.  I want to delete stuff
when I feel I’ve learned enough.&lt;/p&gt;
&lt;p&gt;Let’s see how code looks:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;wintersmith --preview
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>